BPMF
Mick Ramsey

Initial Condition/Import Data

Clear["Global`*"]
Needs["MultivariateStatistics`"]

Needs["MultivariateStatistics`"]

dim = 10; (*Dimension of Latenet Features*)
\[Beta]0 = 2.;
W0 = N[IdentityMatrix[dim]]; (*Hyperparameter*)
\[Mu]0 = 
 N[Transpose[{ConstantArray[0, 
     dim]}]];(*Hyperparameter*)
\[Nu]0 = 10. (*Hyperparameter*)

Vj = Import["/Users/mick/Desktop/PROJECT/ImportData/movie.csv"];
Ui = Import["/Users/mick/Desktop/PROJECT/ImportData/user.csv"];
matrixdata = 
  Import["/Users/mick/Desktop/PROJECT/ImportData/netflixdata.csv"];
probedata = Import["/Users/mick/Desktop/PROJECT/ImportData/probedata.csv"];
traindata = Import["/Users/mick/Desktop/PROJECT/ImportData/traindata.csv"];

spMD = SparseArray[matrixdata];


Equations

uu = probedata[[All, 1]]; (*list users in probe data set*)
vv = 
 probedata[[All, 2]];(*list of rated movies in probe data set*)
ratings = 
 N[probedata[[All, 
    3]]]; (*Rating cooresponding to user movie combition*)
meanrating = 
 N[Mean[traindata[[All, 3]]]];
d = Transpose[spMD]["AdjacencyLists"];
c = spMD["AdjacencyLists"];
rij = ReplaceAll[
   DeleteCases[0] /@ Transpose[matrixdata], {} -> ConstantArray[0, 1]];
rij2 = Select[DeleteCases[0] /@ matrixdata, UnsameQ[#, {}] &];
AB = ReplaceAll[Map[(Ui[[#, All]]) &, d], {} -> ConstantArray[0, {1, dim}]];
BA = Map[(Vj[[#, All]]) &, c];

iW[iAB_] := 
  With[{Nuv = N[Length[iAB]], Suv = N[Covariance[iAB]], 
    Xuv = N[Transpose[{Mean[iAB]}]]}, (Inverse[
       Inverse[W0] + 
        Nuv Suv + (\[Beta]0 Nuv)/(\[Beta]0 + Nuv)*(\[Mu]0 - 
            Xuv).Transpose[\[Mu]0 - Xuv]] + 
      Transpose[
       Inverse[Inverse[W0] + 
         Nuv Suv + (\[Beta]0 Nuv)/(\[Beta]0 + Nuv)*(\[Mu]0 - 
             Xuv).Transpose[\[Mu]0 - Xuv]]])/2];
iL[iAB_, \[CapitalLambda]_] := 
 Transpose[CholeskyDecomposition[(Inverse[(\[Beta]0 + 
          N[Length[iAB]])*\[CapitalLambda]] + 
      Transpose[Inverse[(\[Beta]0 + N[Length[iAB]])*\[CapitalLambda]]])/2]]
i\[CapitalLambda]uv[iAB_] := 
 With[{W = iW[iAB], \[Nu] = \[Nu]0 + N[Length[iAB]]}, 
  RandomVariate[WishartDistribution[W, \[Nu]]]]
i\[Mu]uv[iAB_, \[CapitalLambda]_] := 
 With[{L = iL[
     iAB, \[CapitalLambda]], \[Mu] = (\[Beta]0 \[Mu]0 + 
       N[Length[iAB]] N[Transpose[{Mean[iAB]}]])/(\[Beta]0 + 
       N[Length[iAB]])}, \[Mu] + 
   L.RandomVariate[NormalDistribution[0, 1], dim]]

\[Mu]mean[\[CapitalLambda]_, uv_, 
  r_, \[CapitalLambda]C_, \[Mu]C_] := \[CapitalLambda].(\[Beta]0*
     Transpose[uv].(r - meanrating) + \[CapitalLambda]C.\[Mu]C)
\[CapitalLambda]covar[
  uv_, \[CapitalLambda]C_] := (Inverse[\[CapitalLambda]C + \[Beta]0*
       Transpose[uv].uv] + 
    Transpose[Inverse[\[CapitalLambda]C + \[Beta]0*Transpose[uv].uv]])/2
UVlat[\[Lambda]_, \[Mu]m_] := 
 Flatten[\[Lambda].RandomVariate[NormalDistribution[0, 1], dim] + \[Mu]m]


Module

bArray = {};
aArray = {};
eArray = {};

proball = Total[Vj[[aam]]*Ui[[aap]], {2}] + meanrating ;
counterprobe = 1;

Monitor[Do[
    i\[CapitalLambda]v = i\[CapitalLambda]uv[Vj];
    i\[Mu]v = i\[Mu]uv[Vj, i\[CapitalLambda]v];
    
    i\[CapitalLambda]u = i\[CapitalLambda]uv[Ui];
    i\[Mu]u = i\[Mu]uv[Ui, i\[CapitalLambda]u];
    
    
    Monitor[Do[
      i\[CapitalLambda] = 
       MapThread[\[CapitalLambda]covar, {AB, 
         ConstantArray[i\[CapitalLambda]v, Dimensions[AB]]}];
      i\[Lambda] = MapThread[CholeskyDecomposition, {i\[CapitalLambda]}];
      i\[Alpha] = 
       MapThread[\[Mu]mean, {i\[CapitalLambda], AB, rij, 
         ConstantArray[i\[CapitalLambda]v, Dimensions[AB]], 
         ConstantArray[i\[Mu]v, Dimensions[AB]]}];
      Vj = MapThread[UVlat, {i\[Lambda], i\[Alpha]}];
      
      
      i\[CapitalLambda] = 
       MapThread[\[CapitalLambda]covar, {BA, 
         ConstantArray[i\[CapitalLambda]u, Dimensions[BA]]}];
      i\[Lambda] = MapThread[CholeskyDecomposition, {i\[CapitalLambda]}];
      i\[Alpha] = 
       MapThread[\[Mu]mean, {i\[CapitalLambda], BA, rij2, 
         ConstantArray[i\[CapitalLambda]u, Dimensions[BA]], 
         ConstantArray[i\[Mu]u, Dimensions[BA]]}];
      Ui = MapThread[UVlat, {i\[Lambda], i\[Alpha]}];
      
      , {tt, 1, 2}(*Thining of 50%*)
      
      ], {tt, ProgressIndicator[tt, {1, 2}]}];
    
    AppendTo[bArray, Vj];
    AppendTo[aArray, Ui];
    
    
    prediction = Total[Vj[[vv]]*Ui[[uu]], {2}] + meanrating;
    proball = (counterprobe*proball + prediction)/(counterprobe + 1);
    counterprobe = counterprobe + 1;
    rms = (ratings - proball)^2;
    err = (Total[rms]/N[Length[probedata]])^(1/2);
    AppendTo[eArray, err];
    
    ,
    {t, 1, 5000}
    
    ], {t, ProgressIndicator[t, {1, 5000}]}]; // AbsoluteTiming

Results and Graphs

ListPlot[eArray]

fu[x_, y_] := {aArray[[x]][[y]]}.Transpose[{aArray[[x]][[y]]}]
fv[x_, y_] := {bArray[[x]][[y]]}.Transpose[{bArray[[x]][[y]]}]


udata = Flatten[Table[fu[x, 1], {x, 1, 300}]];
ListLinePlot[udata]

vdata = Flatten[Table[fv[x, 1], {x, 1, 300}]];
ListLinePlot[vdata]

ui[x_, y_, z_] := aArray[[x]][[y]][[z]]
vi[x_, y_, z_] := bArray[[x]][[y]][[z]]

Histogram[Table[vi[x, 2567, 1], {x, 400, 3000}], 40]

Histogram3D[Table[vi[x, 323, {3, 4}], {x, 800, 1800}], 60]

cosine[x1_, 
  x2_] := {iVArray[[1800]][[x1]]}.Transpose[{iVArray[[1800]][[x2]]}]/(Norm[
     iVArray[[1800]][[x1]]] Norm[iVArray[[1800]][[x2]]])
